// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)


type testConfigCollection int

const (
	testSetDefault testConfigCollection = iota
	testSetAll
	testSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name       string
		configSet testConfigCollection
	}{
		{
			name:       "default",
			configSet: testSetDefault,
		},
		{
			name:       "all_set",
			configSet: testSetAll,
		},
		{
			name:       "none_set",
			configSet: testSetNone,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopCreateSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0
			{{- range $name, $metric := .Metrics }}
			{{- if and $metric.Enabled $metric.Warnings.IfEnabled }}
			if test.configSet == testSetDefault || test.configSet == testSetAll {
				assert.Equal(t, "[WARNING] `{{ $name }}` should not be enabled: {{ $metric.Warnings.IfEnabled }}", observedLogs.All()[expectedWarnings].Message)
				expectedWarnings++
			}
			{{- end }}
			{{- if $metric.Warnings.IfEnabledNotSet }}
			if test.configSet == testSetDefault {
				assert.Equal(t, "[WARNING] Please set `enabled` field explicitly for `{{ $name }}`: {{ $metric.Warnings.IfEnabledNotSet }}", observedLogs.All()[expectedWarnings].Message)
				expectedWarnings++
			}
			{{- end }}
			{{- if $metric.Warnings.IfConfigured }}
			if test.configSet == testSetAll || test.configSet == testSetNone {
				assert.Equal(t, "[WARNING] `{{ $name }}` should not be configured: {{ $metric.Warnings.IfConfigured }}", observedLogs.All()[expectedWarnings].Message)
				expectedWarnings++
			}
			{{- end }}
			{{- end }}
			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0
			{{- range $name, $metric := .Metrics }}

				{{ if $metric.Enabled }}defaultMetricsCount++{{ end }}
				allMetricsCount++
				mb.Record{{ $name.Render }}DataPoint(ts, {{ if $metric.Data.HasMetricInputType }}"1"{{ else }}1{{ end }}
				{{- range $metric.Attributes -}}
					, {{ if (attributeInfo .).Enum }}Attribute{{ .Render }}(1){{ else }}{{ (attributeInfo .).Type.TestValue }}{{ end }}
				{{- end }})
			{{- end }}

			metrics := mb.Emit(
			{{- $sep := "" }}
			{{- range $name, $info := .ResourceAttributes -}}
				{{- $sep }}With{{ $name.Render }}
				{{- if $info.Enum }}{{ index $info.Enum 0 | publicVar }}{{ else }}({{- $info.Type.TestValue }}){{ end }}
				{{- $sep = ", " }}
			{{- end -}}
			)

			if test.configSet == testSetNone {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			{{- $assignSign := ":=" }}
			attrCount := 0
			enabledAttrCount := 0
			{{- range $name, $info := .ResourceAttributes }}
				attrVal, ok {{ $assignSign }} rm.Resource().Attributes().Get("{{ $name }}")
				attrCount++
				assert.Equal(t, mb.resourceAttributesSettings.{{ $name.Render }}.Enabled, ok)
				if mb.resourceAttributesSettings.{{ $name.Render }}.Enabled {
					enabledAttrCount++
					{{- if $info.Enum }}
						assert.Equal(t, "{{ index $info.Enum 0 }}", attrVal.Str())
					{{- else }}
						assert.EqualValues(t, {{ $info.Type.TestValue }}, attrVal.{{ $info.Type }}())
					{{- end }}
				}

				{{- $assignSign = "=" }}
			{{- end }}
			assert.Equal(t, enabledAttrCount, rm.Resource().Attributes().Len())
			assert.Equal(t, attrCount, {{ len .ResourceAttributes }})

			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.configSet == testSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.configSet == testSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				{{- range $name, $metric := .Metrics }}
				case "{{ $name }}":
					assert.False(t, validatedMetrics["{{ $name }}"], "Found a duplicate in the metrics slice: {{ $name }}")
					validatedMetrics["{{ $name }}"] = true
					assert.Equal(t, pmetric.MetricType{{ $metric.Data.Type }}, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).{{ $metric.Data.Type }}().DataPoints().Len())
					assert.Equal(t, "{{ $metric.Description }}", ms.At(i).Description())
					assert.Equal(t, "{{ $metric.Unit }}", ms.At(i).Unit())
					{{- if $metric.Data.HasMonotonic }}
					assert.Equal(t, {{ $metric.Data.Monotonic }}, ms.At(i).{{ $metric.Data.Type }}().IsMonotonic())
					{{- end }}
					{{- if $metric.Data.HasAggregated }}
					assert.Equal(t, pmetric.AggregationTemporality{{ $metric.Data.Aggregated }}, ms.At(i).{{ $metric.Data.Type }}().AggregationTemporality())
					{{- end }}
					dp := ms.At(i).{{ $metric.Data.Type }}().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueType{{ $metric.Data.MetricValueType }}, dp.ValueType())
					assert.Equal(t, {{ $metric.Data.MetricValueType.BasicType }}(1), dp.{{ $metric.Data.MetricValueType }}Value())

					{{- range $i, $attr := $metric.Attributes }}
					attrVal, ok {{ if eq $i 0 }}:{{ end }}= dp.Attributes().Get("{{ attributeName $attr }}")
					assert.True(t, ok)
					{{- if (attributeInfo $attr).Enum }}
					assert.Equal(t, "{{ index (attributeInfo $attr).Enum 0 }}", attrVal.Str())
					{{- else }}
					assert.EqualValues(t, {{ (attributeInfo $attr).Type.TestValue }}, attrVal.{{ (attributeInfo $attr).Type }}())
					{{- end }}
					{{- end }}
				{{- end }}
				}
			}
		})
	}
}

func loadConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
